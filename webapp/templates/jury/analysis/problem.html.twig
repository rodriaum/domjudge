{% extends "jury/base.html.twig" %}

{% block title %}Análise - Problema {{ problem.probid }} {{ current_contest.shortname |
default('') }} - {{ parent() }}{% endblock %}

{% block extrahead %}
{{ parent() }}
<link rel="stylesheet" href="{{asset('css/nv.d3.min.css')}}">
<script src="{{asset('js/d3.min.js')}}"></script>
<script src="{{asset('js/nv.d3.min.js')}}"></script>
<script src="{{asset('js/FileSaver.min.js')}}"></script>
<style>
.row.equal {
  display: flex;
  flex-wrap: wrap;
}
.card {
  height: 100%;
}
</style>
{% endblock %}

{% block content %}
      <h1>Problema {{ problem.probid }}: <span style="font-size: 60%;">{{ contest_problem |
problemBadge }}</span> {{ problem.name }}</h1>
        {% include 'jury/partials/analysis_filter.html.twig' %}
     </div>
    <div class="col-lg-3 col-sm-6 mt-3">
      <div class="card">
        <div class="card-header">
          Estatísticas Diversas
        </div>
        <div class="card-body">
          <dl class="row">
            <dt class="col-sm-6"># Submissões</dt>
            <dd class="col-sm-6">{{ submissions|length }}</dd>

            <dt class="col-sm-6"># Corretas</dt>
            <dd class="col-sm-6">{{ results['correct']|default(0) }} <span class="text-muted">({{ misc.correct_percentage|number_format(2) }}%)</span></dd>

            <dt class="col-sm-6"># Equipas Tentadas</dt>
            <dd class="col-sm-6">{{ misc.num_teams_attempted }}</dd>

            <dt class="col-sm-6"># Equipas Corretas</dt>
            <dd class="col-sm-6">{{misc.num_teams_correct}} <span class="text-muted">({{  misc.teams_correct_percentage|number_format(2) }}%)</dd>
          </dl>
        </div>
      </div>
    </div>
    <div class="col-lg-4 col-sm-6 mt-3" id="judging_results">
      <div class="card">
        <div class="card-header">
          Resultados do Julgamento
        </div>
        <div class="card-body">
          <svg style="height: 275px"></svg>
        </div>
      </div>
    </div>
    <div class="col-lg-5 col-sm-12 mt-3" id="graph_submissions">
      <div class="card">
        <div class="card-header">
          Submissões ao longo do Tempo
        </div>
        <div class="card-body">
        <svg style="height: 275px"></svg>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-6 col-sm-6 mt-3">
      <div class="card">
        <div class="card-header">
          Melhores Tempos de Execução
        </div>
        <div class="card-body">
          <svg style="height: 275px"></svg>
        </div>
      </div>
    </div>
    <div class="col-lg-6 col-sm-6 mt-3">
      <div class="card">
        <div class="card-header">
          Tempos de Envio para Acerto
        </div>
        <div class="card-body">
          <svg style="height: 275px"></svg>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block extrafooter %}
<script>
{%
set colors = {
  'correct':         '#01df01',
  'wrong-answer':    'red',
  'timelimit':       'orange',
  'run-error':       '#ff3399',
  'compiler-error': 'grey',
  'no-output':       'purple',
  'frozen':          'blue',
  'output-limit':    'black',
}
%}

//////////////////////////////////////
// Results by type (pie chart)
var judging_results = [
  {% for result,count in results %}
  {
    key: "{{result}}",
    y: {{ count }},
    color: "{{colors[result]}}"
  },
  {% endfor %}
];
nv.addGraph(function() {
  var chart = nv.models.pieChart()
      .x(function(d) { return d.key })
      .y(function(d) { return d.y })
      .showLabels(true)
      .labelThreshold(.05)
      .labelType("percent")
      .donut(true)
      .donutRatio(0.35)
      .showLegend(true)
      ;
  chart.legend.vers("furious");
  d3.select('#judging_results svg')
      .datum(judging_results)
      .transition().duration(350)
      .call(chart);
  return chart;
});

//////////////////////////////////////
// Submissions over time
const submission_stats = [
  {% for result in ['correct', 'wrong-answer', 'timelimit', 'run-error', 'compiler-error', 'no-output'] %}
  {
    key: "{{result}}",
    color: "{{colors[result]}}",
    values: []
  },
  {% endfor %}
];
const contest_start_time = {{ current_contest.starttime }};
const contest_duration_seconds = {{ (current_contest.endtime - current_contest.starttime) | round(0, 'ceil') }};
const submissions = [
  {% for submission in submissions %}
  {
    result: "{{ submission.result }}",
    submittime: {{ submission.submittime }},
  }{{ loop.last ? '' : ',' }}
  {% endfor %}
];
createSubmissionGraph(submission_stats, contest_start_time, contest_duration_seconds, submissions);

//////////////////////////////////////
// Max runtimes
var max_run_times = [
  {
    key: "Max runtimes",
    values: [
      {% for submission in misc.max_run_times %}
      {
        "label" : "{{ submission.language.name }}",
        "value" : {{ submission.max_runtime }},
        "submission_id": {{ submission.submitid }},
        "runtime": {{ submission.runtime }}
      },
      {% endfor %}
    ]
  }
];
nv.addGraph(function() {
  var chart = nv.models.discreteBarChart()
      .x(function(d) { return d.label })
      .y(function(d) { return d.value })
      .staggerLabels(true)
      .valueFormat(d3.format('.3f'))
      .margin({bottom: 120})
      .duration(250)
      ;
  chart.yAxis
    .tickFormat(d3.format('.3f'))
    .axisLabel('Tempo de Execução (s)');
  chart.xAxis.axisLabel("Linguagem");
  d3.select('#max_run_times svg')
      .datum(max_run_times)
      .call(chart);
  nv.utils.windowResize(chart.update);
  return chart;
});

//////////////////////////////////////
// First solve times (if any)
{% if misc.first_solve_times|length > 0 %}
var first_solve_times = [
  {
    key: "Primeiro tempo de resolução",
    values: [
      {% for team_name,time_in_minutes in misc.first_solve_times %}
      {
        "label" : "{{ team_name }}",
        "value" : {{ time_in_minutes }},
      },
      {% endfor %}
    ]
  }
];
nv.addGraph(function() {
  var chart = nv.models.discreteBarChart()
      .x(function(d) { return d.label })
      .y(function(d) { return d.value })
      .staggerLabels(true)
      .valueFormat(d3.format('.0f'))
      .margin({bottom: 120})
      .duration(250)
      ;
  chart.yAxis
    .tickFormat(d3.format('.0f'))
    .axisLabel('Tempo (minutos)');
  chart.xAxis.axisLabel("Equipa");
  d3.select('#first_solve_times svg')
      .datum(first_solve_times)
      .call(chart);
  nv.utils.windowResize(chart.update);
  return chart;
});
{% endif %}
</script>
{% include 'jury/analysis/download_graphs.html.twig' %}
{% endblock %}